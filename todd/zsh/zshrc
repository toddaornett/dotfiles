########## # character encoding ##########
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_TIME=ja_JP

##########
# install the missing package manager brew if missing
##########
if ! type brew &>/dev/null
then
  mkdir -p $HOME/.local/homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C $HOME/.local/homebrew
  echo 'path=("$HOME/.local/homebrew/bin" $path)' >> $HOME/.zprofile
  path=("$HOME/.local/homebrew/bin" $path)
fi

##########
# install the fast node manager
##########
if ! type fnm &>/dev/null
then
  brew install fnm
fi
eval "$(fnm env --use-on-cd --version-file-strategy=recursive)"

##########
# terminal (alacritty and tmux)
##########

# emacs key bindings
bindkey -e

# setup terminfo if needed and launch tmux
# (for one thing, this was needed to make my backspace key work)
if [ ! -f $(brew --prefix)/opt/ncurses/bin/infocmp ] || [ ! $(brew --prefix)/opt/ncurses/bin/infocmp tmux-256color &>/dev/null ]
then
  if ! brew list | grep ncurses
  then
    brew install ncurses
  fi
  $(brew --prefix)/opt/ncurses/bin/infocmp tmux-256color > /tmp/tmux-256color
  tic -xe tmux-256color /tmp/tmux-256color
  rm /tmp/tmux-256color
fi
if ! command -v tmux &>/dev/null
then
  brew install tmux
fi
if command -v tmux &>/dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]
then
  exec tmux new -As0 && exit
fi

##########
# hammerspoon config
##########
defaults write org.hammerspoon.Hammerspoon MJConfigFile "~/.config/todd/hammerspoon/init.lua"

##########
# autocomplete and history
##########
autoload -Uz compinit
typeset -i updated_at=$(date +'%j' -r ~/.zcompdump 2>/dev/null || stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)
if [ $(date +'%j') != $updated_at ]; then
  compinit -i
else
  compinit -C -i
fi
zmodload -i zsh/complist
setopt auto_list # automatically list choices on ambiguous completion
setopt auto_menu # automatically use menu completion
setopt always_to_end # move cursor to end if word had one match
zstyle ':completion:*' menu select # select completions with arrow keys
zstyle ':completion:*' group-name '' # group results by category
zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion

export HISTFILE=$HOME/.zsh_history
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE
setopt hist_ignore_all_dups # remove older duplicate entries from history
setopt hist_reduce_blanks # remove superfluous blanks from history items
setopt inc_append_history # save history entries as soon as they are entered
setopt share_history # share history between different instances of the shell

##########
# enhance cd and use zoxide with fzf
##########
setopt auto_cd
if ! type zoxide >/dev/null
then
  brew install zoxide
  rm ~/.zcompdump*; compinit
fi
export _ZO_EXCLUDE_DIRS="$HOME/private/*"
eval "$(zoxide init zsh)"

if [ ! -d $(brew --prefix)/opt/fzf ]
then
  brew install fzf
  # To install useful key bindings and fuzzy completion:
  $(brew --prefix)/opt/fzf/install
fi
if [[ ! "$PATH" == */homebrew/opt/fzf/bin* ]]; then
  PATH="${PATH:+${PATH}:}$(brew --prefix)/opt/fzf/bin"
fi

# Auto-completion
[[ $- == *i* ]] && source "$(brew --prefix)/opt/fzf/shell/completion.zsh" 2>/dev/null

# Key bindings
# ------------
source "$(brew --prefix)/opt/fzf/shell/key-bindings.zsh"

if [ ! -d $(brew --prefix)/opt/zsh-autocomplete ]
then
  brew install zsh-autocomplete
fi

#########
# node.js
##########
if ! command -v fnm >/dev/null
then
  brew install fnm
fi
eval $(fnm env)

##########
# rust
##########
if ! command -v rustup | grep rustup &>/dev/null
then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  echo 'path=("$HOME/.cargo/bin" $path)' >> $HOME/.zprofile
fi

##########
# preset folders
##########
unset cdirmap
declare -A cdirmap
devBase=~/Projects
cdirmap[P]="$devBase"
cdirmap[vim]="$HOME/.config/nvim"

# display the folder shortcut mappings
function ds {
  (for key value in ${(@kv)cdirmap}; do printf "%-10s %s\n" $key $value; done) | sort
}

# change to specified folder by key
# e.g. to change to the ~/Projects directory, type "d P"
function d {
  key="$1"
  if [ -n "$key" ] && 
  then
    e=${key:0:1}
    echo $e
    v="${cdirmap[${key}]}" 
    if [ -n "$v" ];
    then
      cd "$v"
    else
      cd "$dirBase"
    fi
  else
    cd "$dirBase"
  fi
  unset key
}

##########
# spaceship prompt
##########
if ! brew list spaceship &>/dev/null
then
  brew install spaceship
fi
source $(brew --prefix)/opt/spaceship/spaceship.zsh

##########
# misc
##########
alias G='grep -i'
alias Z='source ~/.zprofile && source ~/.zshrc'

###########
# Copy/Paste aliases
###########
alias p='pbcopy '
alias P='pbpaste '

##########
# change finder setting for showing of hidden files
##########
function hide {
  defaults write com.apple.Finder AppleShowAllFiles false
}

function show {
  defaults write com.apple.Finder AppleShowAllFiles true
}

###########
# simulate locate command, thereby using the same Spotlight search DB
###########
function locate {
  mdfind "kMDItemDisplayName == '$@'wc";
}

###########
# remove (aka nuke) various things
###########
function nuke-config-nvim {
  rm -rf ~/.config/nvim
  rm -rf ~/.local/share/nvim
}

###########
# building from varous sources
###########
function make-my-nvim {
  if [ ! -d ~/Projects/neovim/ ]
  then
    if [ ! -d ~/Projects ]
    then
      mkdir ~/Projects
    fi
    cd Projects
    git clone https://github.com/neovim/neovim.git
  fi
  if [[ "$#" -gt 0 ]] || [[ ! $(git pull | grep "Already up to date." &>/dev/null) ]]
  then
    cd ~/Projects/neovim
    make CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=$HOME/Neovim install
  fi
}

###########
# swagger editor
###########
function swage {
  if ! docker images | grep swaggerapi/swagger-editor 2>/dev/null
  then
    docker pull swaggerapi/swagger-editor
  fi
  docker run -p 80:8080 swaggerapi/swagger-editor
}

##########
# install marksman lsp for markdown
##########
if ! type marksman >/dev/null
then
  brew install marksman
fi

##########
# install ripgrep
##########
if ! type rg >/dev/null
then
  brew install rg
fi

##########
# install fd
##########
if ! type fd >/dev/null
then
  brew install fd
fi

##########
# install coreutils
##########
if [ ! -d $(brew --prefix)/opt/coreutils ]
then
  brew install coreutils
fi

##########
# install doom emacs
# see also:
#   https://github.com/doomemacs/doomemacs
#   https://github.com/d12frosted/homebrew-emacs-plus
##########
if ! type emacs &>/dev/null
then
  brew tap d12frosted/emacs-plus
  brew install emacs-plus@29 --with-modern-doom-icon
  echo 'path=("\$HOME/.config/emacs/bin" $path)' >> $HOME/.zprofile
  ln -s $(brew --prefix)/opt/emacs-plus@29/Emacs.app /Applications/Emacs.app
fi
if [ ! -d ~/.config/emacs ]
then
  git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.config/emacs
  $HOME/.config/emacs/bin/doom install
  $HOME/.config/emacs/bin/doom sync
fi

##########
# install moreutils which includes sponge command
##########
if ! type sponge &>/dev/null
then
  brew install moreutils
fi

##########
# install libpq
##########
if [ ! -d $(brew --prefix)/opt/libpq ]
then
  brew install libpq
  echo "export CPPFLAGS=\"-I$(brew --prefix)/opt/libpq/include\"" | cat - $HOME/.zprofile | sponge $HOME/.zprofile
  echo "export LDFLAGS=\"-L$(brew --prefix)/opt/libpq/lib\"" | cat - $HOME/.zprofile | sponge $HOME/.zprofile
fi

###########
# Neovim configuration switcher
###########
alias nvim-lazy="NVIM_APPNAME=LazyVim nvim"
alias nvim-kick="NVIM_APPNAME=kickstart nvim"
alias nvim-chad="NVIM_APPNAME=NvChad nvim"
alias nvim-astro="NVIM_APPNAME=AstroNvim nvim"

function nvims() {
  items=("default" "kickstart" "LazyVim" "NvChad" "AstroNvim")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}

##########
# install lazygit
##########
if ! type lazygit &>/dev/null
then
  brew install jesseduffield/lazygit/lazygit
  brew install lazygit
fi

##########
# install and configure direnv
##########
if ! type direnv &>/dev/null
then
  brew install direnv
fi
eval "$(direnv hook zsh)"
